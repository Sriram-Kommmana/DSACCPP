class Solution {
public:
    void dfs(int xPoint, int yPoint, vector<vector<char>>& board, vector<vector<int>>& visited, int x[], int y[]){
        visited[xPoint][yPoint] = 1;

        int m = board.size();
        int n = board[0].size();

        for(int k = 0; k < 4; k++){
            int nRow = xPoint + x[k];
            int nCol = yPoint + y[k];

            if(nRow >= 0 && nRow < m && nCol >= 0 && nCol < n && !visited[nRow][nCol] && board[nRow][nCol] == 'O'){
                dfs(nRow, nCol, board, visited, x, y);
            }
        }
    }
    void solve(vector<vector<char>>& board) {
        int m = board.size();
        int n = board[0].size();

        vector<vector<int>> visited(m, vector<int>(n, 0));

        int x[4] = {0, 0, 1, -1};
        int y[4] = {1, -1, 0, 0};

        int i,j;
        for(i = 0; i < n; i++){

            if(!visited[0][i] && board[0][i] == 'O'){
                dfs(0, i, board, visited, x, y);
            }

            if(!visited[m-1][i] && board[m-1][i] == 'O'){
                dfs(m-1, i, board, visited, x, y);
            }
        }

        for(j = 0; j < m; j++){

            if(!visited[j][0] && board[j][0] == 'O'){
                dfs(j, 0, board, visited, x, y);
            }

            if(!visited[j][n-1] && board[j][n-1] == 'O'){
                dfs(j, n-1, board, visited, x, y);
            }
        }

        for(i = 0; i < m; i++){
            for(j = 0; j < n; j++){
                if(!visited[i][j] && board[i][j] == 'O'){
                    board[i][j] = 'X';
                }
            }
        }

    }
};
