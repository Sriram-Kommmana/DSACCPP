/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int solve(TreeNode* root){

        if(root == NULL) return 0;

        int leftHeight = solve(root -> left);
        if(leftHeight == -1) return -1;
        int rightHeight = solve(root -> right);
        if(rightHeight == -1) return -1;

        if(abs(leftHeight - rightHeight) > 1) return -1;

        return max(leftHeight, rightHeight) + 1;

    }
    bool isBalanced(TreeNode* root) {
        return solve(root) != -1;
    }
};

// balanced binary tree ka left subtree ka height aur right subtree ka height ka difference <= 1 hota hai.
// iska intuition bas yahi hai ki agar balances hai toh height of the tree return hoga. nahi toh -1 return hoga.


pair<bool, int> isBalanced(Node* root){
    if(root == NULL) return {true, 0};

    pair<bool, int> left = isBalanced(root -> left);
    pair<bool, int> right = isBalanced(root -> right);

    bool isLeft = left.first;
    bool isRight = right.first;

    bool diff = abs(left.second - right.second) <= 1;

    pair<bool, int> ans;
    ans.first = isLeft && isRight && diff;
    ans.second = max(left.second, right.second) + 1;
    return ans;
}
bool Balanced(Node* root){
    return isBalanced(root).first;
}
