/*
// Tree Node
class Node {
  public:
    int data;
    Node* left;
    Node* right;

    // Constructor to initialize a new node
    Node(int val) {
        data = val;
        left = NULL;
        right = NULL;
    }
};
*/

class Solution {
  public:
  
    bool isLeaf(Node* root){
        return root -> left == NULL && root -> right == NULL;
    }
    
    void addLeftBoundary(Node* root, vector<int>& ans){
        Node* curr = root -> left;
        while(curr){
            if(!isLeaf(curr)){
                ans.push_back(curr -> data);
            }
            
            if(curr -> left) curr = curr -> left;
            else curr = curr -> right;
        }
    }
    
    void addLeaves(Node* root, vector<int>& ans){
        if(isLeaf(root)) ans.push_back(root -> data);
        
        if(root -> left) addLeaves(root -> left, ans);
        if(root -> right) addLeaves(root -> right, ans);
    }
    
    void addRightBoundary(Node* root, vector<int>& ans){
        stack<int> st;
        
        Node* curr = root -> right;
        while(curr){
            if(!isLeaf(curr)){
                st.push(curr -> data);
            }
            if(curr -> right) curr = curr -> right;
            else curr = curr -> left;
        }
        while(!st.empty()){
            int temp = st.top();
            ans.push_back(temp);
            st.pop();
        }
    }
    
    vector<int> boundaryTraversal(Node *root) {
        
        vector<int> ans;
        if(root == NULL) return ans;
        
        if(!isLeaf(root)) ans.push_back(root -> data);
        
        addLeftBoundary(root, ans);
        addLeaves(root, ans);
        addRightBoundary(root, ans);
        
        return ans;
        
    }
};








// yeh anti-clock wise printing hai
