/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        
        if(root == NULL) return 0;
        long long ans = 0;
        queue<pair<TreeNode*, int>> q;
        q.push({root, 0});
        while(!q.empty()){
            long long n = q.size();
            long long minIndex = q.front().second;
            long long firstNode, lastNode;

            for(int i = 0; i < n; i++){
                long long curr_id = q.front().second - minIndex;
                TreeNode* node = q.front().first;
                q.pop();

                if(i == 0) firstNode = curr_id;
                if(i == n - 1) lastNode = curr_id;

                if(node -> left){
                    q.push({node -> left, (long long)(2 * curr_id) + 1});
                }
                if(node -> right){
                    q.push({node -> right, (long long)(2 * curr_id) + 2});
                }
 
            }
            ans = max(ans, (lastNode - firstNode + 1));
        }

        return ans;

    }
};
