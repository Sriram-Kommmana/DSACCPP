/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* build(vector<int>& preorder,int preStart, int preEnd, vector<int>& inorder, int inStart, int inEnd, map<int, int> &storeIndex){

        if(preStart > preEnd || inStart > inEnd) return NULL;

        TreeNode* root = new TreeNode(preorder[preStart]);

        int inRoot = storeIndex[preorder[preStart]];
        int numsLeft = inRoot - inStart;

        root -> left = build(preorder, preStart + 1, preStart + numsLeft, inorder, inStart, inRoot - 1, storeIndex);
        root -> right = build(preorder, preStart + numsLeft + 1, preEnd, inorder, inRoot + 1, inEnd, storeIndex);

        return root;

    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        
        map<int, int> storeIndex;
        for(int i = 0; i < inorder.size(); i++){
            storeIndex[inorder[i]] = i;
        }
        TreeNode* root = build(preorder, 0, preorder.size() - 1, inorder, 0, inorder.size() - 1, storeIndex);
        return root;

    }
};
