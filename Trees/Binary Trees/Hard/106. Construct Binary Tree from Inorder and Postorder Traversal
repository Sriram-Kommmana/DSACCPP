/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* build(vector<int>& inorder, int inStart, int inEnd, vector<int>& postorder, int postStart, int postEnd, map<int, int> &storeIndex){

        if(inStart > inEnd || postStart > postEnd) return NULL;

        TreeNode* root = new TreeNode(postorder[postEnd]);

        int inIndex = storeIndex[postorder[postEnd]];
        int leftSize = inIndex - inStart;

        root -> left = build(inorder, inStart, inIndex - 1, postorder, postStart, postStart + leftSize - 1, storeIndex);
        root -> right = build(inorder, inIndex + 1, inEnd, postorder, postStart + leftSize, postEnd - 1, storeIndex);

        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        
        map<int, int> storeIndex;
        for(int i = 0; i < inorder.size(); i++){
            storeIndex[inorder[i]] = i;
        }

        TreeNode* root = build(inorder, 0, inorder.size() - 1, postorder, 0, postorder.size() - 1, storeIndex);
        return root;

    }
};
