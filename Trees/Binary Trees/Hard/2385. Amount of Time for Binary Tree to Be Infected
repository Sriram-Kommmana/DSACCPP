/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findTime(TreeNode* startNode, unordered_map<TreeNode*, TreeNode*> &parentStore){
        queue<TreeNode*> q;
        q.push(startNode);
        map<TreeNode*, int> visited;

        visited[startNode] = 1;
        int time = 0;
        while(!q.empty()){
            int size = q.size();
            int fl = 0;
            for(int i = 0; i < size; i++){
                auto node = q.front();
                q.pop();
                if(node -> left && !visited[node -> left]){
                    fl = 1;
                    visited[node -> left] = 1;
                    q.push(node -> left);
                }
                if(node -> right && !visited[node -> right]){
                    fl = 1;
                    visited[node -> right] = 1;
                    q.push(node -> right);
                }
                if(parentStore[node] && !visited[parentStore[node]]){
                    fl = 1;
                    visited[parentStore[node]] = 1;
                    q.push(parentStore[node]);
                }
            }
            if(fl) time++;
        }
        return time;
    }
    TreeNode* markParents(TreeNode* root, unordered_map<TreeNode*, TreeNode*> &parentStore, int start){

        queue<TreeNode*> q;
        q.push(root);
        TreeNode* ans;
        while(!q.empty()){
            TreeNode* node = q.front();
            if(node -> val == start) ans = node;
            q.pop();
            if(node -> left){
                q.push(node -> left);
                parentStore[node -> left] = node;
            }
            if(node -> right){
                q.push(node -> right);
                parentStore[node -> right] = node;
            }
        }
        return ans;

    }
    int amountOfTime(TreeNode* root, int start) {
        unordered_map<TreeNode*, TreeNode*> parentStore;
        TreeNode* startNode = markParents(root, parentStore, start);
        int ans = findTime(startNode, parentStore);
        return ans;
    }
};
