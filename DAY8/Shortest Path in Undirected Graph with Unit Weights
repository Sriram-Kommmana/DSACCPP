// we can use simple bfs because it has unit weights and undirected
// initialising the distance vector with infinity as the distance of each element
// initializing a queue of pairs <node, distance>
// push <src,0> into the queue
// then do a bfs and increase the distance by 1 and keep updating the distance array
// here also we dont need visited array, we are good to go with distance array, if you get a distance that is greater than the distance in the distance array then you have to reject that pair 
//    - which is not update the dist.array and not to put in queue



class Solution {
  public:
    vector<int> shortestPath(vector<vector<int>>& adj, int src) {
        
        int n = adj.size();
        vector<int> distance(n, INT_MAX);
        queue<pair<int, int>> q;
        
        distance[src] = 0;
        
        q.push({src, 0});
        
        while(!q.empty()){
            
            int node = q.front().first;
            int dist = q.front().second;
            q.pop();
            
            for(auto element: adj[node]){
                if(dist + 1 < distance[element]){
                    distance[element] = dist + 1;
                    q.push({element, dist+1});
                }
            }
        }
            
        for(int i = 0; i < n; i++){
            if(distance[i] == INT_MAX){
                distance[i] = -1;
            }
        }
        
        return distance;
        
    }
};
