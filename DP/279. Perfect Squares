class Solution {
public:
    int solve(int n){
        if(n == 0) return 0;

        int ans = n;
        for(int i = 1; i * i <= n; i++){
            ans = min(ans, 1 + solve(n - (i * i)));
        }
        return ans;
    }

    int solveMem(int n, vector<int>& dp){
        if(n == 0) return 0;

        if(dp[n] != -1) return dp[n];

        int ans = n;
        for(int i = 1; i * i <= n; i++){
            ans = min(ans, 1 + solveMem(n - (i * i), dp));
        }
        return ans;
    }

    int solveTab(int n){
        vector<int> dp(n + 1, INT_MAX);

        dp[0] = 0;
        for(int j = 1; j <= n; j++){
            for(int i = 1; i * i <= n; i++){
                int temp = i * i;
                if(j - temp >= 0){
                    dp[j] = min(dp[j], 1 + dp[j - temp]);
                }
            }
        }

        return dp[n];
    }

    int numSquares(int n) {
        // int ans = solve(n);

        // vector<int> dp(n + 1, -1);
        // int ans = solveMem(n, dp);

        int ans = solveTab(n);
        return ans;
    }
};
