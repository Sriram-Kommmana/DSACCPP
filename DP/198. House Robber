class Solution {
public:
    int solve(vector<int>& nums, int index){

        if(index >= nums.size()) return 0;

        int include = nums[index] + solve(nums, index + 2);
        int exclude = 0 + solve(nums, index + 1);

        return max(include, exclude); 

    }

    int solveMem(vector<int>& nums, int index, vector<int>& dp){

        if(index >= nums.size()) return 0;

        if(dp[index] != -1) return dp[index];
        int include = nums[index] + solveMem(nums, index + 2, dp);
        int exclude = 0 + solveMem(nums, index + 1, dp);

        return dp[index] = max(include, exclude); 

    }

    int solveTab(vector<int>& nums){
        int n = nums.size();

        if(n == 0) return 0;
        if(n == 1) return nums[0];

        vector<int> dp(n, 0);

        dp[0] = nums[0];
        dp[1] = max(nums[0], nums[1]);

        for(int index = 2; index < n; index++){

            dp[index] = max(nums[index] + dp[index - 2], dp[index - 1]); 
        }

        return dp[n-1];
    }

    int solveSO(vector<int>& nums){
        int n = nums.size();

        if(nums.size() == 0) return 0;
        if(nums.size() == 1) return nums[0];

        int prev2 = nums[0];
        int prev1 = max(nums[0], nums[1]);

        int curr = 0;

        for(int i = 2; i < n; i++){
            curr = max(nums[i] + prev2, prev1);

            prev2 = prev1;
            prev1 = curr;
        }
        return prev1;
    }

    int rob(vector<int>& nums) {
        //int ans =  solve(nums, 0);

        // vector<int> dp(nums.size(), -1);
        // int ansMem = solveMem(nums, 0, dp);

        //int ansTab = solveTab(nums);

        int so = solveSO(nums); 
        return so;
    }
};
