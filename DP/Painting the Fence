class Solution {
  public:
  
    int solve(int n, int k, vector<int>& dp){
        if(n == 1) return k;
        if(n == 2) return k * k;
        
        if(dp[n] != -1) return dp[n];
        
        return dp[n] = (k - 1) * (solve(n - 1, k, dp) + solve(n - 2, k, dp));
    }
    
    
    int solveTab(int n, int k){
        
        vector<int> dp(n + 1, -1);
        
        dp[1] = k;
        dp[2] = k * k;
        
        for(int i = 3; i <= n; i++){
            dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2]);
        }
        
        return dp[n];
    }
    
    int SO(int n, int k){
        
        int prev2 = k;
        int prev1 = k * k;
        
        if(n == 1) return prev2;
        if(n == 2) return prev1;
        
        int curr;
        for(int i =3; i <= n; i++){
            curr = (k - 1) * (prev2 + prev1);
            
            prev2 = prev1; 
            prev1 = curr;
        }
        return curr;
        
    }
    
    int countWays(int n, int k) {
        
        // vector<int> dp(n + 1, -1);
        // int ans = solve(n, k, dp);
        
        // int ans = solveTab(n, k);
        
        int ans = SO(n, k);
        return ans;
        
    }
};
