class Solution {
  public:
    bool cycleDetection(int V, vector<vector<int>>& edges) {
        
        vector<int> adj[V];
        vector<int> indegree(V, 0);
        queue<int> q;
        
        for(int i = 0; i < edges.size(); i++){
            int from = edges[i][0];
            int to = edges[i][1];
            
            indegree[to]++;
            
            adj[from].push_back(to);
        }
        
        for(int i = 0; i < V; i++){
            if(indegree[i] == 0){
                q.push(i);
            }
        }
        
        vector<int> topo;
        
        while(!q.empty()){
            int node = q.front();
            q.pop();
            topo.push_back(node);
            
            for(auto it: adj[node]){
                indegree[it]--;
                if(indegree[it] == 0) q.push(it);
            }
        }
        
        if(topo.size() == V) return false; // cycle is not present
        
        return true; // cycle is present
    }
};
