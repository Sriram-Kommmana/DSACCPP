class Solution {
    
  public:
    bool dfs(int node, vector<int> adj[], vector<int>& visited, vector<int>& pathVisited){
        visited[node] = 1;
        pathVisited[node] = 1;
        
        for(auto& neighbour: adj[node]){
            if(!visited[neighbour]){
                if(dfs(neighbour, adj, visited, pathVisited) == true) return true;
            }
            else if(visited[neighbour] && pathVisited[neighbour]){
                return true;
            }
        }
        pathVisited[node] = 0;
        return false;
    }
    bool isCyclic(int V, vector<vector<int>> &edges) {
        vector<int> adj[V];

        for(int i = 0; i < edges.size(); i++){
            int from = edges[i][0];
            int to = edges[i][1];

            adj[from].push_back(to);
        }

        vector<int> visited(V, 0);
        vector<int> pathVisited(V, 0);

        for(int i = 0; i < V; i++){
            if(dfs(i, adj, visited, pathVisited) == true) return true;
        }
        
        return false;
        
    }
};
