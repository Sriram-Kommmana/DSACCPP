class Solution {
  public:
    void dfs(int i, vector<int> adj[], vector<int>& visited, stack<int>& st){
        
        visited[i] = 1;
        
        for(auto& neighbour: adj[i]){
            if(!visited[neighbour]){
                dfs(neighbour, adj, visited, st);
            }
        }
        
        st.push(i);
    }
    vector<int> topoSort(int V, vector<vector<int>>& edges) {
        
        vector<int> adj[V];
        
        for(int i = 0; i < edges.size(); i++){
            int from = edges[i][0];
            int to = edges[i][1];
            
            adj[from].push_back(to);
        }
        
        vector<int> visited(V, 0);
        stack<int> st;
        
        for(int i = 0; i < V; i++){
            if(!visited[i]){
                dfs(i, adj, visited, st);
            }
        }
        vector<int> ans;
        
        while(!st.empty()){
            ans.push_back(st.top());
			st.pop();
        }
        return ans;
    }
};
