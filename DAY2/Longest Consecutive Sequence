// You are given an unsorted array of integers.
// Your task is to find the length of the longest sequence of consecutive integers in the array.
//The sequence elements must be consecutive integers, but they do not need to be in order in the original array.

// better solution 
int longestSuccessiveElements(vector<int>& nums) {
    if (nums.size() == 0) return 0;

    sort(nums.begin(), nums.end());

    int n = nums.size();
    int lastSmaller = nums[0];
    int cnt = 1;
    int longest = 1;

    for (int i = 1; i < n; i++) {
        if (nums[i] == lastSmaller) {
            continue; // skip duplicates
        }
        else if (nums[i] == lastSmaller + 1) {
            cnt++;
        } else {
            cnt = 1;
        }
        lastSmaller = nums[i];
        longest = max(longest, cnt);
    }

    return longest;
}

// OPTIMAL SOLUTION

#include <iostream>
#include <vector>
#include <unordered_set>
using namespace std;

int longestConsecutive(const vector<int>& nums) {
    unordered_set<int> numSet(nums.begin(), nums.end());
    int longestStreak = 0;

    for (int num : nums) {
        // Only start counting if it's the beginning of a sequence
        if (numSet.find(num - 1) == numSet.end()) {
            int currentNum = num;
            int currentStreak = 1;

            while (numSet.find(currentNum + 1) != numSet.end()) {
                currentNum++;
                currentStreak++;
            }

            longestStreak = max(longestStreak, currentStreak);
        }
    }

    return longestStreak;
}

int main() {
    vector<int> nums = {100, 4, 200, 1, 3, 2};
    cout << "Longest consecutive sequence length: " << longestConsecutive(nums) << endl;
    return 0;
}
