class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        queue<pair<pair<int,int>, int>> q;
        int m = mat.size(), n = mat[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));
        vector<vector<int>> ans(m, vector<int>(n, 0));

        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(mat[i][j] == 0){
                    q.push({{i, j}, 0});
                    visited[i][j] = 1;
                }
            }
        }
        int x[4] = {0, 0, 1, -1};
        int y[4] = {1, -1, 0, 0};
        while(!q.empty()){
            int nx = q.front().first.first;
            int ny = q.front().first.second;
            int dist = q.front().second;

            q.pop();

            for(int k = 0; k < 4; k++){
                int nrow = nx + x[k];
                int ncol = ny + y[k];

                if(nrow>=0 && nrow < m && ncol >= 0 && ncol < n && !visited[nrow][ncol] && mat[nrow][ncol] != 0){
                    q.push({{nrow, ncol}, dist+1});
                    visited[nrow][ncol] = 1;
                }
            }
            ans[nx][ny] = dist;
        }
        return ans;
    }
};
