class Solution {
  public:
    bool isCycle(int V, vector<vector<int>>& edges) {
        int n = edges.size();
        vector<int> adj[V];
        vector<int> visited(V, 0);
        queue<pair<int, int>> q;
        
        for(int i = 0; i < n; i++){
            int k = edges[i][0];
            int l = edges[i][1];
            
            adj[k].push_back(l);
            adj[l].push_back(k);
        }
        
        for(int i = 0; i < V; i++){
            if(visited[i] == 0){
                q.push({i, -1});
                visited[i] = 1;
                
                while(!q.empty()){
                    int element = q.front().first;
                    int cameFrom = q.front().second;
                    
                    q.pop();
                    
                    for(auto adjacentNode: adj[element]){
                        if(visited[adjacentNode] == 0){
                            visited[adjacentNode] = 1;
                            q.push({adjacentNode, element});
                        }
                        else if(visited[adjacentNode] == 1 && cameFrom != adjacentNode){
                            return true;
                        }
                    }
                }
            }
        }
        
        
        return false;
    }
};
