class Solution {
  public:
    bool dfs(int node,int parent, vector<int> adj[], vector<int>& visited){
        
        visited[node] = 1;
        
        for(auto adjacentNode: adj[node]) {
            if(visited[adjacentNode] == 0) {
                if(dfs(adjacentNode, node, adj, visited) == true) 
                    return true; 
            }
            else if(adjacentNode != parent) return true; 
        }
        return false;
    }
    bool isCycle(int V, vector<vector<int>>& edges) {
        int n = edges.size();
        vector<int> adj[V];
        vector<int> visited(V, 0);
        
        for(int i = 0; i < n; i++){
            int k = edges[i][0];
            int l = edges[i][1];
            
            adj[k].push_back(l);
            adj[l].push_back(k);
        }
        
        for(int i = 0; i < V; i++){
            if(visited[i] == 0){
                bool ans = dfs(i, -1, adj, visited);
                if(ans == true) return true;
            }
        }
        return false;
    }
};
